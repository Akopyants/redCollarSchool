@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'functions' as funcs;
@use 'variables' as vars;

@mixin font-face($name, $file, $weight: 400, $style: normal) {
	@font-face {
		font-family: "#{$name}";
		src: local("#{$file}"),
		url('../fonts/#{$file}.woff2') format('woff2'),
		url('../fonts/#{$file}.woff') format('woff');
		font-weight: $weight;
		font-style: $style;
		font-display: swap;
	}
}

@mixin bg ($size:"contain", $position: "center") {
	background-size: #{$size};
	background-position: #{$position};
	background-repeat: no-repeat;
}

@mixin btn_anim($scaleMax:1.05, $scaleMin:0.95) {
	transform-origin: center center;
	transition: all ease-out 240ms;

	&:hover {
		transform: scale(#{$scaleMax});
	}

	&:focus {
		outline: transparent;
	}

	&:focus-visible {
		transform: scale(#{$scaleMax}) translateY(-5%);
	}

	&:active {
		transform: scale(#{$scaleMin});
	}
}

@mixin no-btn ($display:"inline-block") {
	padding: 0;
	margin: 0;
	border: 0;
	background-color: transparent;
	border-radius: 0;
	cursor: pointer;
	appearance: none;
	display: #{$display};
}

@mixin transit ($tr:0.24) {
	transition: all #{$tr}s;
}

@mixin container($max-width:"120rem", $padding:"2rem") {
	width: 100%;
	max-width: #{$max-width};
	padding: 0 #{$padding};
	margin: 0 auto;
}

$breakpoints: (
  xs: 0,
  sm: 361px,
  md: 861px,
  lg: 1040px,
  xl: 1280px,
) !default;

//
// MEDIA
//
@mixin media($breakpoint, $range: 'min') {
	@if map.has-key(vars.$breakpoints, $breakpoint) {
	  $mapGetNext: funcs.map-get-next(vars.$breakpoints, $breakpoint);
	  $nextValue: if($mapGetNext == false, 0, $mapGetNext - 1);
  
	  $thisValue: map.get(vars.$breakpoints, $breakpoint);
  
	  @if $thisValue == 0 and $range == 'min' {
		// TODO: Enable warnings without fail on compiling
		//@warn 'Meaningless @media;
		@content; // fallback for not to break anything
	  } @else if $nextValue == 0 and $range == 'max' {
		//@warn 'Meaningless @media;
		@content; // fallback for not to break anything
	  } @else {
		@if $range == 'only' {
		  @if $thisValue == 0 {
			@media (max-width: $nextValue) {
			  @content;
			}
		  } @else if $nextValue == 0 {
			//@warn 'Meaningless @media;
			@content; // fallback for not to break anything
		  } @else {
			@media (min-width: $thisValue) and (max-width: $nextValue) {
			  @content;
			}
		  }
		} @else {
		  $thisValue: map.get(vars.$breakpoints, $breakpoint);
		  $result: if($range == 'min', $thisValue, $nextValue);
  
		  @media (#{$range}-width: $result) {
			@content;
		  }
		}
	  }
	} @else {
	  @media (#{$range}-width: $breakpoint) {
		@content;
	  }
	}
  }